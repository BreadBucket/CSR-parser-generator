//tokens
// BOOLEANCONST STRINGCONST REALCONST INTEGERCONST ADD ASSIGN COLON COMMA
// DIV DOT EQU GEQ GTH INTERVAL LBRACKET LPARENT LEQ LTH MUL NEQ PTR
// RBRACKET RPARENT SEMIC SUB BOOLEAN CHAR REAL INTEGER AND ARRAY BEGIN
// CASE CONST DO DOWNTO ELSE END FILE FOR FORWARD FUNCTION GOTO IDIV IF
// IMOD IN LABEL NIL NOT OF OR PACKED PROCEDURE PROGRAM RECORD REPEAT SET
// STEP THEN TO TYPE UNTIL VAR WHILE WITH IDENTIFIER ;

//goal source ;

// PROGRAM:

program_header label_declarations CONST -> program_upto_labels(1,2) 3
program_header label_declarations TYPE -> program_upto_labels(1,2) 3
program_header label_declarations VAR -> program_upto_labels(1,2) 3
program_header label_declarations PROCEDURE -> program_upto_labels(1,2) 3
program_header label_declarations FUNCTION -> program_upto_labels(1,2) 3
program_header label_declarations BEGIN -> program_upto_labels(1,2) 3
program_header CONST -> program_upto_labels(1) 2
program_header TYPE -> program_upto_labels(1) 2
program_header VAR -> program_upto_labels(1) 2
program_header PROCEDURE -> program_upto_labels(1) 2
program_header FUNCTION -> program_upto_labels(1) 2
program_header BEGIN -> program_upto_labels(1) 2

program_upto_labels const_declarations TYPE -> program_upto_consts(1,2) 3
program_upto_labels const_declarations VAR -> program_upto_consts(1,2) 3
program_upto_labels const_declarations PROCEDURE -> program_upto_consts(1,2) 3
program_upto_labels const_declarations FUNCTION -> program_upto_consts(1,2) 3
program_upto_labels const_declarations BEGIN -> program_upto_consts(1,2) 3
program_upto_labels TYPE -> program_upto_consts(1) 2
program_upto_labels VAR -> program_upto_consts(1) 2
program_upto_labels PROCEDURE -> program_upto_consts(1) 2
program_upto_labels FUNCTION -> program_upto_consts(1) 2
program_upto_labels BEGIN -> program_upto_consts(1) 2

program_upto_consts type_declarations VAR -> program_upto_types(1,2) 3
program_upto_consts type_declarations PROCEDURE -> program_upto_types(1,2) 3
program_upto_consts type_declarations FUNCTION -> program_upto_types(1,2) 3
program_upto_consts type_declarations BEGIN -> program_upto_types(1,2) 3
program_upto_consts VAR -> program_upto_types(1) 2
program_upto_consts PROCEDURE -> program_upto_types(1) 2
program_upto_consts FUNCTION -> program_upto_types(1) 2
program_upto_consts BEGIN -> program_upto_types(1) 2

program_upto_types var_declarations PROCEDURE -> program_upto_vars(1,2) 3
program_upto_types var_declarations FUNCTION -> program_upto_vars(1,2) 3
program_upto_types var_declarations BEGIN -> program_upto_vars(1,2) 3
program_upto_types PROCEDURE -> program_upto_vars(1) 2
program_upto_types FUNCTION -> program_upto_vars(1) 2
program_upto_types BEGIN -> program_upto_vars(1) 2

program_upto_vars subprogram -> 1 subprgs(2)
program_upto_vars subprgs subprogram -> 1 subprgs(2,3)
program_upto_vars subprgs BEGIN -> program_upto_subprograms(1,2) 3

program_upto_subprograms block_stmt DOT -> program(1,2,3)

// PROGRAM HEADER:

PROGRAM IDENTIFIER SEMIC -> program_header(1,2,3)
PROGRAM IDENTIFIER LPARENT RPARENT SEMIC -> program_header(1,2,3,4)
PROGRAM IDENTIFIER LPARENT file_names RPARENT SEMIC -> program_header(1,2,3,4,5,6)

PROGRAM IDENTIFIER LPARENT IDENTIFIER -> 1 2 3 file_names(4)
file_names COMMA IDENTIFIER -> file_names(1,2,3)

// LABEL DECLARATIONS:

LABEL label_names SEMIC -> label_declarations(1,2,3)

LABEL INTEGERCONST -> 1 label_names(2)
label_names COMMA INTEGERCONST -> label_names(1,2,3)

// CONST DECLARATIONS:

CONST IDENTIFIER EQU STRINGCONST -> 1 2 3 constant(4)
const_declarations IDENTIFIER EQU STRINGCONST -> 1 2 3 constant(4)
CONST IDENTIFIER EQU REALCONST -> 1 2 3 constant(4)
const_declarations IDENTIFIER EQU REALCONST -> 1 2 3 constant(4)
CONST IDENTIFIER EQU INTEGERCONST -> 1 2 3 constant(4)
const_declarations IDENTIFIER EQU INTEGERCONST -> 1 2 3 constant(4)
CONST IDENTIFIER EQU BOOLEANCONST -> 1 2 3 constant(4)
const_declarations IDENTIFIER EQU BOOLEANCONST -> 1 2 3 constant(4)
CONST IDENTIFIER EQU IDENTIFIER -> 1 2 3 constant(4)
const_declarations IDENTIFIER EQU IDENTIFIER -> 1 2 3 constant(4)
CONST IDENTIFIER EQU ADD STRINGCONST SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU ADD STRINGCONST SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU SUB STRINGCONST SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU SUB STRINGCONST SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU ADD REALCONST SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU ADD REALCONST SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU SUB REALCONST SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU SUB REALCONST SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU ADD INTEGERCONST SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU ADD INTEGERCONST SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU SUB INTEGERCONST SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU SUB INTEGERCONST SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU ADD BOOLEANCONST SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU ADD BOOLEANCONST SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU SUB BOOLEANCONST SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU SUB BOOLEANCONST SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU ADD IDENTIFIER SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU ADD IDENTIFIER SEMIC -> 1 2 3 constant(4,5)
CONST IDENTIFIER EQU SUB IDENTIFIER SEMIC -> 1 2 3 constant(4,5)
const_declarations IDENTIFIER EQU SUB IDENTIFIER SEMIC -> 1 2 3 constant(4,5)

CONST IDENTIFIER EQU constant SEMIC -> 1 const_declaration(2,3,4,5)
const_declarations IDENTIFIER EQU constant SEMIC -> 1 const_declaration(2,3,4,5)

CONST const_declaration -> const_declarations(1,2)
const_declarations const_declaration -> const_declarations(1,2)

// TYPE DECLARATIONS:
//
//
//
//


// HERE ####
TYPE IDENTIFIER EQU IDENTIFIER -> 1 2 3 named_type(4)
type_declarations IDENTIFIER EQU IDENTIFIER -> 1 2 3 named_type(4)
ARRAY LBRACKET IDENTIFIER -> 1 2 named_type(3)
ARRAY LBRACKET simple_types COMMA IDENTIFIER -> 1 2 3 4 named_type(5)
ARRAY LBRACKET simple_types RBRACKET OF IDENTIFIER -> 1 2 3 4 5 named_type(6)
FILE OF IDENTIFIER -> 1 2 named_type(3)
SET OF IDENTIFIER -> 1 2 named_type(3)
record_field_names COLON IDENTIFIER -> 1 2 named_type(3)
var_names COLON IDENTIFIER -> 1 2 named_type(3)
// HERE ####

TYPE IDENTIFIER EQU STRINGCONST INTERVAL -> 1 2 3 constant(4) 5
type_declarations IDENTIFIER EQU STRINGCONST INTERVAL -> 1 2 3 constant(4) 5
ARRAY LBRACKET STRINGCONST INTERVAL -> 1 2 constant(3) 4
ARRAY LBRACKET simple_types COMMA STRINGCONST INTERVAL -> 1 2 3 4 constant(5) 6
ARRAY LBRACKET simple_types RBRACKET OF STRINGCONST INTERVAL -> 1 2 3 4 5 constant(6) 7
FILE OF STRINGCONST INTERVAL -> 1 2 constant(3) 4
SET OF STRINGCONST INTERVAL -> 1 2 constant(3) 4
record_field_names COLON STRINGCONST INTERVAL -> 1 2 constant(3) 4
var_names COLON STRINGCONST INTERVAL -> 1 2 constant(3) 4
TYPE IDENTIFIER EQU REALCONST INTERVAL -> 1 2 3 constant(4) 5
type_declarations IDENTIFIER EQU REALCONST INTERVAL -> 1 2 3 constant(4) 5
ARRAY LBRACKET REALCONST INTERVAL -> 1 2 constant(3) 4
ARRAY LBRACKET simple_types COMMA REALCONST INTERVAL -> 1 2 3 4 constant(5) 6
ARRAY LBRACKET simple_types RBRACKET OF REALCONST INTERVAL -> 1 2 3 4 5 constant(6) 7
FILE OF REALCONST INTERVAL -> 1 2 constant(3) 4
SET OF REALCONST INTERVAL -> 1 2 constant(3) 4
record_field_names COLON REALCONST INTERVAL -> 1 2 constant(3) 4
var_names COLON REALCONST INTERVAL -> 1 2 constant(3) 4
TYPE IDENTIFIER EQU INTEGERCONST INTERVAL -> 1 2 3 constant(4) 5
type_declarations IDENTIFIER EQU INTEGERCONST INTERVAL -> 1 2 3 constant(4) 5
ARRAY LBRACKET INTEGERCONST INTERVAL -> 1 2 constant(3) 4
ARRAY LBRACKET simple_types COMMA INTEGERCONST INTERVAL -> 1 2 3 4 constant(5) 6
ARRAY LBRACKET simple_types RBRACKET OF INTEGERCONST INTERVAL -> 1 2 3 4 5 constant(6) 7
FILE OF INTEGERCONST INTERVAL -> 1 2 constant(3) 4
SET OF INTEGERCONST INTERVAL -> 1 2 constant(3) 4
record_field_names COLON INTEGERCONST INTERVAL -> 1 2 constant(3) 4
var_names COLON INTEGERCONST INTERVAL -> 1 2 constant(3) 4
TYPE IDENTIFIER EQU BOOLEANCONST INTERVAL -> 1 2 3 constant(4) 5
type_declarations IDENTIFIER EQU BOOLEANCONST INTERVAL -> 1 2 3 constant(4) 5
ARRAY LBRACKET BOOLEANCONST INTERVAL -> 1 2 constant(3) 4
ARRAY LBRACKET simple_types COMMA BOOLEANCONST INTERVAL -> 1 2 3 4 constant(5) 6
ARRAY LBRACKET simple_types RBRACKET OF BOOLEANCONST INTERVAL -> 1 2 3 4 5 constant(6) 7
FILE OF BOOLEANCONST INTERVAL -> 1 2 constant(3) 4
SET OF BOOLEANCONST INTERVAL -> 1 2 constant(3) 4
record_field_names COLON BOOLEANCONST INTERVAL -> 1 2 constant(3) 4
var_names COLON BOOLEANCONST INTERVAL -> 1 2 constant(3) 4
TYPE IDENTIFIER EQU IDENTIFIER INTERVAL -> 1 2 3 constant(4) 5
type_declarations IDENTIFIER EQU IDENTIFIER INTERVAL -> 1 2 3 constant(4) 5
ARRAY LBRACKET IDENTIFIER INTERVAL -> 1 2 constant(3) 4
ARRAY LBRACKET simple_types COMMA IDENTIFIER INTERVAL -> 1 2 3 4 constant(5) 6
ARRAY LBRACKET simple_types RBRACKET OF IDENTIFIER INTERVAL -> 1 2 3 4 5 constant(6) 7
FILE OF IDENTIFIER INTERVAL -> 1 2 constant(3) 4
SET OF IDENTIFIER INTERVAL -> 1 2 constant(3) 4
record_field_names COLON IDENTIFIER INTERVAL -> 1 2 constant(3) 4
var_names COLON IDENTIFIER INTERVAL -> 1 2 constant(3) 4


TYPE IDENTIFIER EQU ADD STRINGCONST INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU ADD STRINGCONST INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET ADD STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA ADD STRINGCONST INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF ADD STRINGCONST INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF ADD STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
SET OF ADD STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON ADD STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
var_names COLON ADD STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU SUB STRINGCONST INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU SUB STRINGCONST INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET SUB STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA SUB STRINGCONST INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF SUB STRINGCONST INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF SUB STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
SET OF SUB STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON SUB STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
var_names COLON SUB STRINGCONST INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU ADD REALCONST INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU ADD REALCONST INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET ADD REALCONST INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA ADD REALCONST INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF ADD REALCONST INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF ADD REALCONST INTERVAL -> 1 2 constant(3,4) 5
SET OF ADD REALCONST INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON ADD REALCONST INTERVAL -> 1 2 constant(3,4) 5
var_names COLON ADD REALCONST INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU SUB REALCONST INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU SUB REALCONST INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET SUB REALCONST INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA SUB REALCONST INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF SUB REALCONST INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF SUB REALCONST INTERVAL -> 1 2 constant(3,4) 5
SET OF SUB REALCONST INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON SUB REALCONST INTERVAL -> 1 2 constant(3,4) 5
var_names COLON SUB REALCONST INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU ADD INTEGERCONST INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU ADD INTEGERCONST INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET ADD INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA ADD INTEGERCONST INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF ADD INTEGERCONST INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF ADD INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
SET OF ADD INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON ADD INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
var_names COLON ADD INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU SUB INTEGERCONST INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU SUB INTEGERCONST INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET SUB INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA SUB INTEGERCONST INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF SUB INTEGERCONST INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF SUB INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
SET OF SUB INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON SUB INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
var_names COLON SUB INTEGERCONST INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU ADD BOOLEANCONST INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU ADD BOOLEANCONST INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET ADD BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA ADD BOOLEANCONST INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF ADD BOOLEANCONST INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF ADD BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
SET OF ADD BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON ADD BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
var_names COLON ADD BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU SUB BOOLEANCONST INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU SUB BOOLEANCONST INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET SUB BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA SUB BOOLEANCONST INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF SUB BOOLEANCONST INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF SUB BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
SET OF SUB BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON SUB BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
var_names COLON SUB BOOLEANCONST INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU ADD IDENTIFIER INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU ADD IDENTIFIER INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET ADD IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA ADD IDENTIFIER INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF ADD IDENTIFIER INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF ADD IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
SET OF ADD IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON ADD IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
var_names COLON ADD IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
TYPE IDENTIFIER EQU SUB IDENTIFIER INTERVAL -> 1 2 3 constant(4,5) 6
type_declarations IDENTIFIER EQU SUB IDENTIFIER INTERVAL -> 1 2 3 constant(4,5) 6
ARRAY LBRACKET SUB IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
ARRAY LBRACKET simple_types COMMA SUB IDENTIFIER INTERVAL -> 1 2 3 4 constant(5,6) 7
ARRAY LBRACKET simple_types RBRACKET OF SUB IDENTIFIER INTERVAL -> 1 2 3 4 5 constant(6,7) 8
FILE OF SUB IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
SET OF SUB IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
record_field_names COLON SUB IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5
var_names COLON SUB IDENTIFIER INTERVAL -> 1 2 constant(3,4) 5


TYPE IDENTIFIER EQU PTR IDENTIFIER -> 1 2 3 pointer_type(4,5)
type_declarations IDENTIFIER EQU PTR IDENTIFIER -> 1 2 3 pointer_type(4,5)
ARRAY LBRACKET PTR IDENTIFIER -> 1 2 pointer_type(3,4)
ARRAY LBRACKET simple_types COMMA PTR IDENTIFIER -> 1 2 3 4 pointer_type(5,6)
ARRAY LBRACKET simple_types RBRACKET OF PTR IDENTIFIER -> 1 2 3 4 5 pointer_type(6,7)
FILE OF PTR IDENTIFIER -> 1 2 pointer_type(3,4)
SET OF PTR IDENTIFIER -> 1 2 pointer_type(3,4)
record_field_names COLON PTR IDENTIFIER -> 1 2 pointer_type(3,4)
var_names COLON PTR IDENTIFIER -> 1 2 pointer_type(3,4)


TYPE IDENTIFIER EQU LPARENT IDENTIFIER -> 1 2 3 4 enum_names(5)
type_declarations IDENTIFIER EQU LPARENT IDENTIFIER -> 1 2 3 4 enum_names(5)
ARRAY LBRACKET LPARENT IDENTIFIER -> 1 2 3 enum_names(4)
ARRAY LBRACKET simple_types COMMA LPARENT IDENTIFIER -> 1 2 3 4 5 enum_names(6)
ARRAY LBRACKET simple_types RBRACKET OF LPARENT IDENTIFIER -> 1 2 3 4 5 6 enum_names(7)
FILE OF LPARENT IDENTIFIER -> 1 2 3 enum_names(4)
SET OF LPARENT IDENTIFIER -> 1 2 3 enum_names(4)
record_field_names COLON LPARENT IDENTIFIER -> 1 2 3 enum_names(4)
var_names COLON LPARENT IDENTIFIER -> 1 2 3 enum_names(4)


//
//
//
//

TYPE IDENTIFIER EQU type SEMIC -> 1 type_declaration(2,3,4,5)
type_declarations IDENTIFIER EQU type SEMIC -> 1 type_declaration(2,3,4,5)
TYPE type_declaration -> type_declarations(1,2)
type_declarations type_declaration -> type_declarations(1,2)

CHAR -> atom_type(1)
REAL -> atom_type(1)
INTEGER -> atom_type(1)
BOOLEAN -> atom_type(1)

enum_names COMMA IDENTIFIER -> enum_names(1,2,3)
LPARENT enum_names RPARENT -> enum_type(1,2,3)

INTERVAL STRINGCONST -> 1 constant(2)
INTERVAL REALCONST -> 1 constant(2)
INTERVAL INTEGERCONST -> 1 constant(2)
INTERVAL BOOLEANCONST -> 1 constant(2)
INTERVAL IDENTIFIER -> 1 constant(2)
INTERVAL ADD STRINGCONST -> 1 constant(2,3)
INTERVAL SUB STRINGCONST -> 1 constant(2,3)
INTERVAL ADD REALCONST -> 1 constant(2,3)
INTERVAL SUB REALCONST -> 1 constant(2,3)
INTERVAL ADD INTEGERCONST -> 1 constant(2,3)
INTERVAL SUB INTEGERCONST -> 1 constant(2,3)
INTERVAL ADD BOOLEANCONST -> 1 constant(2,3)
INTERVAL SUB BOOLEANCONST -> 1 constant(2,3)
INTERVAL ADD IDENTIFIER -> 1 constant(2,3)
INTERVAL SUB IDENTIFIER -> 1 constant(2,3)
constant INTERVAL constant -> subrange_type(1,2,3)

atom_type -> simple_type(1)
named_type -> simple_type(1)
enum_type -> simple_type(1)
subrange_type -> simple_type(1)

ARRAY LBRACKET simple_type -> 1 2 simple_types(3)
simple_types COMMA simple_type -> simple_types(1,2,3)
ARRAY LBRACKET simple_types RBRACKET OF type -> array_type(1,2,3,4,5,6)

FILE OF type -> file_type(1,2,3)

SET OF simple_type -> set_type(1,2,3)

RECORD SEMIC -> RECORD(1,2)

RECORD END -> record_type(1,2)
RECORD record_field_declarations END -> record_type(1,2,3)
RECORD record_field_declarations SEMIC END -> record_type(1,2,3,4)
RECORD record_field_declarations SEMIC record_case END -> record_type(1,2,3,4,5)
RECORD record_field_declarations SEMIC record_case SEMIC END -> record_type(1,2,3,4,5,6)
RECORD record_case END -> record_type(1,2,3)
RECORD record_case SEMIC END -> record_type(1,2,3,4)

RECORD record_field_declaration -> 1 record_field_declarations(2)
record_constants COLON LPARENT record_field_declaration -> 1 2 3 record_field_declarations(4)
record_field_declarations SEMIC SEMIC -> 1 SEMIC(2,3)
record_field_declarations SEMIC record_field_declaration -> record_field_declarations(1,2,3)

record_field_names COLON type -> record_field_declaration(1,2,3)

RECORD IDENTIFIER -> 1 record_field_names(2)
record_field_declarations SEMIC IDENTIFIER -> 1 2 record_field_names(3)
record_constants COLON LPARENT IDENTIFIER -> 1 2 3 record_field_names(4)
record_field_names COMMA IDENTIFIER -> record_field_names(1,2,3)

record_case_header RPARENT -> record_case(1) 2
record_case_header END -> record_case(1) 2
record_case_header SEMIC RPARENT -> record_case(1) 2 3
record_case_header SEMIC END -> record_case(1) 2 3
record_case_header record_case_branches RPARENT -> record_case(1,2) 3
record_case_header record_case_branches END -> record_case(1,2) 3
record_case_header record_case_branches SEMIC RPARENT -> record_case(1,2) 3 4
record_case_header record_case_branches SEMIC END -> record_case(1,2) 3 4

RECORD CASE IDENTIFIER OF -> 1 2 named_type(3) 4
record_field_declarations SEMIC CASE IDENTIFIER OF -> 1 2 3 named_type(4) 5
RECORD CASE IDENTIFIER COLON IDENTIFIER OF -> 1 2 3 4 named_type(5) 6
record_field_declarations SEMIC CASE IDENTIFIER COLON IDENTIFIER OF -> 1 2 3 4 5 named_type(6) 7
RECORD CASE atom_type OF -> 1 record_case_header(2,3,4)
record_field_declarations SEMIC CASE atom_type OF -> 1 2 record_case_header(3,4,5)
RECORD CASE named_type OF -> 1 record_case_header(2,3,4)
record_field_declarations SEMIC CASE named_type OF -> 1 2 record_case_header(3,4,5)
RECORD CASE IDENTIFIER COLON atom_type OF -> 1 record_case_header(2,3,4,5,6)
record_field_declarations SEMIC CASE IDENTIFIER COLON atom_type OF -> 1 2 record_case_header(3,4,5,6,7)
RECORD CASE IDENTIFIER COLON named_type OF -> 1 record_case_header(2,3,4,5,6)
record_field_declarations SEMIC CASE IDENTIFIER COLON named_type OF -> 1 2 record_case_header(3,4,5,6,7)

record_case_header SEMIC -> record_case_header(1,2)

record_constants COLON LPARENT RPARENT -> record_case_branch(1,2,3,4)
record_constants COLON LPARENT record_field_declarations RPARENT -> record_case_branch(1,2,3,4,5)
record_constants COLON LPARENT record_field_declarations SEMIC RPARENT -> record_case_branch(1,2,3,4,5,6)
record_constants COLON LPARENT record_field_declarations SEMIC record_case RPARENT -> record_case_branch(1,2,3,4,5,6,7)
record_constants COLON LPARENT record_field_declarations SEMIC record_case SEMIC RPARENT -> record_case_branch(1,2,3,4,5,6,7,8)
record_constants COLON LPARENT record_case RPARENT -> record_case_branch(1,2,3,4,5)
record_constants COLON LPARENT record_case SEMIC RPARENT -> record_case_branch(1,2,3,4,5,6)

record_case_header record_case_branch -> 1 record_case_branches(2)
record_case_branches SEMIC SEMIC -> 1 SEMIC(2,3)
record_case_branches SEMIC record_case_branch -> record_case_branches(1,2,3)

record_case_header STRINGCONST -> 1 record_constant(2)
record_case_branches SEMIC STRINGCONST -> 1 2 record_constant(3)
record_constants COMMA STRINGCONST -> 1 2 record_constant(3)
record_case_header REALCONST -> 1 record_constant(2)
record_case_branches SEMIC REALCONST -> 1 2 record_constant(3)
record_constants COMMA REALCONST -> 1 2 record_constant(3)
record_case_header INTEGERCONST -> 1 record_constant(2)
record_case_branches SEMIC INTEGERCONST -> 1 2 record_constant(3)
record_constants COMMA INTEGERCONST -> 1 2 record_constant(3)
record_case_header BOOLEANCONST -> 1 record_constant(2)
record_case_branches SEMIC BOOLEANCONST -> 1 2 record_constant(3)
record_constants COMMA BOOLEANCONST -> 1 2 record_constant(3)
record_case_header IDENTIFIER -> 1 record_constant(2)
record_case_branches SEMIC IDENTIFIER -> 1 2 record_constant(3)
record_constants COMMA IDENTIFIER -> 1 2 record_constant(3)
record_case_header ADD STRINGCONST -> 1 record_constant(2,3)
record_case_branches SEMIC ADD STRINGCONST -> 1 2 record_constant(3,4)
record_constants COMMA ADD STRINGCONST -> 1 2 record_constant(3,4)
record_case_header SUB STRINGCONST -> 1 record_constant(2,3)
record_case_branches SEMIC SUB STRINGCONST -> 1 2 record_constant(3,4)
record_constants COMMA SUB STRINGCONST -> 1 2 record_constant(3,4)
record_case_header ADD REALCONST -> 1 record_constant(2,3)
record_case_branches SEMIC ADD REALCONST -> 1 2 record_constant(3,4)
record_constants COMMA ADD REALCONST -> 1 2 record_constant(3,4)
record_case_header SUB REALCONST -> 1 record_constant(2,3)
record_case_branches SEMIC SUB REALCONST -> 1 2 record_constant(3,4)
record_constants COMMA SUB REALCONST -> 1 2 record_constant(3,4)
record_case_header ADD INTEGERCONST -> 1 record_constant(2,3)
record_case_branches SEMIC ADD INTEGERCONST -> 1 2 record_constant(3,4)
record_constants COMMA ADD INTEGERCONST -> 1 2 record_constant(3,4)
record_case_header SUB INTEGERCONST -> 1 record_constant(2,3)
record_case_branches SEMIC SUB INTEGERCONST -> 1 2 record_constant(3,4)
record_constants COMMA SUB INTEGERCONST -> 1 2 record_constant(3,4)
record_case_header ADD BOOLEANCONST -> 1 record_constant(2,3)
record_case_branches SEMIC ADD BOOLEANCONST -> 1 2 record_constant(3,4)
record_constants COMMA ADD BOOLEANCONST -> 1 2 record_constant(3,4)
record_case_header SUB BOOLEANCONST -> 1 record_constant(2,3)
record_case_branches SEMIC SUB BOOLEANCONST -> 1 2 record_constant(3,4)
record_constants COMMA SUB BOOLEANCONST -> 1 2 record_constant(3,4)
record_case_header ADD IDENTIFIER -> 1 record_constant(2,3)
record_case_branches SEMIC ADD IDENTIFIER -> 1 2 record_constant(3,4)
record_constants COMMA ADD IDENTIFIER -> 1 2 record_constant(3,4)
record_case_header SUB IDENTIFIER -> 1 record_constant(2,3)
record_case_branches SEMIC SUB IDENTIFIER -> 1 2 record_constant(3,4)
record_constants COMMA SUB IDENTIFIER -> 1 2 record_constant(3,4)

record_case_header record_constant -> 1 record_constants(2)
record_case_branches SEMIC record_constant -> 1 2 record_constants(3)
record_constants COMMA record_constant -> record_constants(1,2,3)

array_type -> struct_type(1)
file_type -> struct_type(1)
set_type -> struct_type(1)
record_type -> struct_type(1)

PACKED struct_type -> packed_type(1,2)

simple_type -> type(1)
pointer_type -> type(1)
struct_type -> type(1)
packed_type -> type(1)

// VAR DECLARATIONS:

VAR IDENTIFIER -> 1 var_names(2)
var_declarations IDENTIFIER -> 1 var_names(2)
var_names COMMA IDENTIFIER -> var_names(1,2,3)

var_names COLON type SEMIC -> var_declaration(1,2,3,4)
VAR var_declaration -> var_declarations(1,2)
var_declarations var_declaration -> var_declarations(1,2)

// SUBPROGRAM DECLARATIONS:

procedure_header -> subprogram_header(1)
function_header -> subprogram_header(1)

PROCEDURE IDENTIFIER SEMIC -> procedure_header(1,2,3)
PROCEDURE IDENTIFIER LPARENT par_declarations RPARENT SEMIC -> procedure_header(1,2,3,4,5,6)

FUNCTION IDENTIFIER COLON IDENTIFIER -> 1 2 3 named_type(4)
FUNCTION IDENTIFIER LPARENT par_declarations RPARENT COLON IDENTIFIER -> 1 2 3 4 5 6 named_type(7)
FUNCTION IDENTIFIER COLON atom_type SEMIC -> function_header(1,2,3,4,5)
FUNCTION IDENTIFIER COLON named_type SEMIC -> function_header(1,2,3,4,5)
FUNCTION IDENTIFIER LPARENT par_declarations RPARENT COLON atom_type SEMIC -> function_header(1,2,3,4,5,6,7,8)
FUNCTION IDENTIFIER LPARENT par_declarations RPARENT COLON named_type SEMIC -> function_header(1,2,3,4,5,6,7,8)

FUNCTION IDENTIFIER LPARENT IDENTIFIER -> 1 2 3 par_names(4)
PROCEDURE IDENTIFIER LPARENT IDENTIFIER -> 1 2 3 par_names(4)
FUNCTION IDENTIFIER LPARENT VAR IDENTIFIER -> 1 2 3 4 par_names(5)
PROCEDURE IDENTIFIER LPARENT VAR IDENTIFIER -> 1 2 3 4 par_names(5)
FUNCTION IDENTIFIER LPARENT FUNCTION IDENTIFIER -> 1 2 3 4 par_names(5)
PROCEDURE IDENTIFIER LPARENT FUNCTION IDENTIFIER -> 1 2 3 4 par_names(5)
FUNCTION IDENTIFIER LPARENT PROCEDURE IDENTIFIER -> 1 2 3 4 par_names(5)
PROCEDURE IDENTIFIER LPARENT PROCEDURE IDENTIFIER -> 1 2 3 4 par_names(5)
par_declarations SEMIC IDENTIFIER -> 1 2 par_names(3)
par_declarations SEMIC VAR IDENTIFIER -> 1 2 3 par_names(4)
par_declarations SEMIC FUNCTION IDENTIFIER -> 1 2 3 par_names(4)
par_declarations SEMIC PROCEDURE IDENTIFIER -> 1 2 3 par_names(4)
par_names COMMA IDENTIFIER -> par_names(1,2,3)

par_names COLON IDENTIFIER -> 1 2 named_type(3)
par_names COLON atom_type SEMIC -> val_par_declaration(1,2,3) 4
par_names COLON named_type SEMIC -> val_par_declaration(1,2,3) 4
par_names COLON atom_type RPARENT -> val_par_declaration(1,2,3) 4
par_names COLON named_type RPARENT -> val_par_declaration(1,2,3) 4
VAR par_names COLON atom_type SEMIC -> ref_par_declaration(1,2,3,4) 5
VAR par_names COLON named_type SEMIC -> ref_par_declaration(1,2,3,4) 5
VAR par_names COLON atom_type RPARENT -> ref_par_declaration(1,2,3,4) 5
VAR par_names COLON named_type RPARENT -> ref_par_declaration(1,2,3,4) 5
FUNCTION par_names COLON atom_type SEMIC -> func_par_declaration(1,2,3,4) 5
FUNCTION par_names COLON named_type SEMIC -> func_par_declaration(1,2,3,4) 5
FUNCTION par_names COLON atom_type RPARENT -> func_par_declaration(1,2,3,4) 5
FUNCTION par_names COLON named_type RPARENT -> func_par_declaration(1,2,3,4) 5
PROCEDURE par_names SEMIC -> proc_par_declaration(1,2) 3
PROCEDURE par_names RPARENT -> proc_par_declaration(1,2) 3

val_par_declaration -> par_declaration(1)
ref_par_declaration -> par_declaration(1)
func_par_declaration -> par_declaration(1)
proc_par_declaration -> par_declaration(1)

LPARENT par_declaration -> 1 par_declarations(2)
par_declarations SEMIC par_declaration -> par_declarations(1,2,3)
subprogram_header EXTERNAL SEMIC -> subprogram(1,2,3)
subprogram_header FORWARD SEMIC -> subprogram(1,2,3)
//subprogram_header block_stmt --> subprogram_declaration(1,2) ;

subprogram_declaration subprogram_declaration -> subprogram_declarations(1,2)
subprogram_declarations subprogram_declaration -> subprogram_declarations(1,2)

subprogram_header label_declarations CONST -> subprogram_upto_labels(1,2) 3
subprogram_header label_declarations TYPE -> subprogram_upto_labels(1,2) 3
subprogram_header label_declarations VAR -> subprogram_upto_labels(1,2) 3
subprogram_header label_declarations PROCEDURE -> subprogram_upto_labels(1,2) 3
subprogram_header label_declarations FUNCTION -> subprogram_upto_labels(1,2) 3
subprogram_header label_declarations BEGIN -> subprogram_upto_labels(1,2) 3
subprogram_header CONST -> subprogram_upto_labels(1) 2
subprogram_header TYPE -> subprogram_upto_labels(1) 2
subprogram_header VAR -> subprogram_upto_labels(1) 2
subprogram_header PROCEDURE -> subprogram_upto_labels(1) 2
subprogram_header FUNCTION -> subprogram_upto_labels(1) 2
subprogram_header BEGIN -> subprogram_upto_labels(1) 2

subprogram_upto_labels const_declarations TYPE -> subprogram_upto_consts(1,2) 3
subprogram_upto_labels const_declarations VAR -> subprogram_upto_consts(1,2) 3
subprogram_upto_labels const_declarations PROCEDURE -> subprogram_upto_consts(1,2) 3
subprogram_upto_labels const_declarations FUNCTION -> subprogram_upto_consts(1,2) 3
subprogram_upto_labels const_declarations BEGIN -> subprogram_upto_consts(1,2) 3
subprogram_upto_labels TYPE -> subprogram_upto_consts(1) 2
subprogram_upto_labels VAR -> subprogram_upto_consts(1) 2
subprogram_upto_labels PROCEDURE -> subprogram_upto_consts(1) 2
subprogram_upto_labels FUNCTION -> subprogram_upto_consts(1) 2
subprogram_upto_labels BEGIN -> subprogram_upto_consts(1) 2

subprogram_upto_consts type_declarations VAR -> subprogram_upto_types(1,2) 3
subprogram_upto_consts type_declarations PROCEDURE -> subprogram_upto_types(1,2) 3
subprogram_upto_consts type_declarations FUNCTION -> subprogram_upto_types(1,2) 3
subprogram_upto_consts type_declarations BEGIN -> subprogram_upto_types(1,2) 3
subprogram_upto_consts VAR -> subprogram_upto_types(1) 2
subprogram_upto_consts PROCEDURE -> subprogram_upto_types(1) 2
subprogram_upto_consts FUNCTION -> subprogram_upto_types(1) 2
subprogram_upto_consts BEGIN -> subprogram_upto_types(1) 2

subprogram_upto_types var_declarations PROCEDURE -> subprogram_upto_vars(1,2) 3
subprogram_upto_types var_declarations FUNCTION -> subprogram_upto_vars(1,2) 3
subprogram_upto_types var_declarations BEGIN -> subprogram_upto_vars(1,2) 3
subprogram_upto_types PROCEDURE -> subprogram_upto_vars(1) 2
subprogram_upto_types FUNCTION -> subprogram_upto_vars(1) 2
subprogram_upto_types BEGIN -> subprogram_upto_vars(1) 2

subprogram_upto_vars subprogram -> 1 subprgs(2)
subprogram_upto_vars subprgs subprogram -> 1 subprgs(2,3)
subprogram_upto_vars subprgs BEGIN -> subprogram_upto_subprograms(1,2) 3
subprogram_upto_vars BEGIN -> subprogram_upto_subprograms(1) 2

subprogram_upto_subprograms block_stmt SEMIC -> subprogram(1,2,3)

// STATEMENTS:

BEGIN SEMIC -> BEGIN(1,2)
REPEAT SEMIC -> REPEAT(1,2)
BEGIN stmt -> 1 stmts(2)
REPEAT stmt -> 1 stmts(2)
stmts SEMIC SEMIC -> 1 SEMIC(2,3)
stmts SEMIC stmt -> stmts(1,2,3)

BEGIN INTEGERCONST COLON -> 1 stmt_label(2)
if_then INTEGERCONST COLON -> 1 stmt_label(2)
if_else INTEGERCONST COLON -> 1 stmt_label(2)
case_constants COLON INTEGERCONST COLON -> 1 2 stmt_label(3)
DO INTEGERCONST COLON -> 1 stmt_label(2)
REPEAT INTEGERCONST COLON -> 1 stmt_label(2)
stmts SEMIC INTEGERCONST COLON -> 1 2 stmt_label(3)

labeled_stmt -> stmt(1)
assign_stmt -> stmt(1)
proc_stmt -> stmt(1)
block_stmt -> stmt(1)
if_stmt -> stmt(1)
case_stmt -> stmt(1)
while_stmt -> stmt(1)
repeat_stmt -> stmt(1)
for_stmt -> stmt(1)
with_stmt -> stmt(1)
goto_stmt -> stmt(1)
stmt_label END -> stmt(1) 2
stmt_label ELSE -> stmt(1) 2
stmt_label UNTIL -> stmt(1) 2
stmt_label SEMIC -> stmt(1) 2

stmt_label stmt -> labeled_stmt(1,2)

BEGIN IDENTIFIER PTR -> 1 var_name(2) 3
if_then IDENTIFIER PTR -> 1 var_name(2) 3
if_else IDENTIFIER PTR -> 1 var_name(2) 3
case_constants COLON IDENTIFIER PTR -> 1 2 var_name(3) 4
DO IDENTIFIER PTR -> 1 var_name(2) 3
REPEAT IDENTIFIER PTR -> 1 var_name(2) 3
stmt_label IDENTIFIER PTR -> 1 var_name(2) 3
stmts SEMIC IDENTIFIER PTR -> 1 2 var_name(3) 4
BEGIN IDENTIFIER DOT -> 1 var_name(2) 3
if_then IDENTIFIER DOT -> 1 var_name(2) 3
if_else IDENTIFIER DOT -> 1 var_name(2) 3
case_constants COLON IDENTIFIER DOT -> 1 2 var_name(3) 4
DO IDENTIFIER DOT -> 1 var_name(2) 3
REPEAT IDENTIFIER DOT -> 1 var_name(2) 3
stmt_label IDENTIFIER DOT -> 1 var_name(2) 3
stmts SEMIC IDENTIFIER DOT -> 1 2 var_name(3) 4
BEGIN IDENTIFIER LBRACKET -> 1 var_name(2) 3
if_then IDENTIFIER LBRACKET -> 1 var_name(2) 3
if_else IDENTIFIER LBRACKET -> 1 var_name(2) 3
case_constants COLON IDENTIFIER LBRACKET -> 1 2 var_name(3) 4
DO IDENTIFIER LBRACKET -> 1 var_name(2) 3
REPEAT IDENTIFIER LBRACKET -> 1 var_name(2) 3
stmt_label IDENTIFIER LBRACKET -> 1 var_name(2) 3
stmts SEMIC IDENTIFIER LBRACKET -> 1 2 var_name(3) 4
BEGIN IDENTIFIER ASSIGN -> 1 var_name(2) 3
if_then IDENTIFIER ASSIGN -> 1 var_name(2) 3
if_else IDENTIFIER ASSIGN -> 1 var_name(2) 3
case_constants COLON IDENTIFIER ASSIGN -> 1 2 var_name(3) 4
DO IDENTIFIER ASSIGN -> 1 var_name(2) 3
REPEAT IDENTIFIER ASSIGN -> 1 var_name(2) 3
stmt_label IDENTIFIER ASSIGN -> 1 var_name(2) 3
stmts SEMIC IDENTIFIER ASSIGN -> 1 2 var_name(3) 4
BEGIN IDENTIFIER LPARENT -> 1 proc_name(2) pstfix_lparent(3)
if_then IDENTIFIER LPARENT -> 1 proc_name(2) pstfix_lparent(3)
if_else IDENTIFIER LPARENT -> 1 proc_name(2) pstfix_lparent(3)
case_constants COLON IDENTIFIER LPARENT -> 1 2 proc_name(3) pstfix_lparent(4)
DO IDENTIFIER LPARENT -> 1 proc_name(2) pstfix_lparent(3)
REPEAT IDENTIFIER LPARENT -> 1 proc_name(2) pstfix_lparent(3)
stmt_label IDENTIFIER LPARENT -> 1 proc_name(2) pstfix_lparent(3)
stmts SEMIC IDENTIFIER LPARENT -> 1 2 proc_name(3) pstfix_lparent(4)
BEGIN IDENTIFIER -> 1 proc_stmt(2)
if_then IDENTIFIER -> 1 proc_stmt(2)
if_else IDENTIFIER -> 1 proc_stmt(2)
case_constants COLON IDENTIFIER -> 1 2 proc_stmt(3)
DO IDENTIFIER -> 1 proc_stmt(2)
REPEAT IDENTIFIER -> 1 proc_stmt(2)
stmt_label IDENTIFIER -> 1 proc_stmt(2)
stmts SEMIC IDENTIFIER -> 1 2 proc_stmt(3)

var_name -> var(1)
var_name PTR -> var_name(1,2)
var_name DOT IDENTIFIER -> var_name(1,2,3)
var_name LBRACKET -> var_core(1) pstfix_lbracket(2)
var_core pstfix_lbracket exprs RBRACKET -> var_name(1,2,3,4)
var ASSIGN expr -> assign_stmt(1,2,3)

proc_name pstfix_lparent args RPARENT -> proc_stmt(1,2,3,4)

BEGIN END -> block_stmt(1,2)
BEGIN stmts END -> block_stmt(1,2,3)
BEGIN stmts SEMIC END -> block_stmt(1,2,3,4)

IF expr THEN -> if_then(1,2,3)
if_then stmt -> if_stmt(1,2)
if_then END -> if_else(1,2)
if_then ELSE -> if_else(1,2)
if_then UNTIL -> if_else(1,2)
if_then SEMIC -> if_else(1,2)
if_then stmt ELSE -> if_else(1,2,3)
if_else stmt -> if_stmt(1,2)
if_else END -> if_stmt(1) 2
if_else ELSE -> if_stmt(1) 2
if_else UNTIL -> if_stmt(1) 2
if_else SEMIC -> if_stmt(1) 2

BEGIN CASE expr OF -> 1 case_header(2,3,4)
if_then CASE expr OF -> 1 case_header(2,3,4)
if_else CASE expr OF -> 1 case_header(2,3,4)
case_constants COLON CASE expr OF -> 1 2 case_header(3,4,5)
DO CASE expr OF -> 1 case_header(2,3,4)
REPEAT CASE expr OF -> 1 case_header(2,3,4)
stmt_label CASE expr OF -> 1 case_header(2,3,4)
stmts SEMIC CASE expr OF -> 1 2 case_header(3,4,5)

case_header STRINGCONST -> 1 case_constant(2)
case_branches SEMIC STRINGCONST -> 1 2 case_constant(3)
case_constants COMMA STRINGCONST -> 1 2 case_constant(3)
case_header REALCONST -> 1 case_constant(2)
case_branches SEMIC REALCONST -> 1 2 case_constant(3)
case_constants COMMA REALCONST -> 1 2 case_constant(3)
case_header INTEGERCONST -> 1 case_constant(2)
case_branches SEMIC INTEGERCONST -> 1 2 case_constant(3)
case_constants COMMA INTEGERCONST -> 1 2 case_constant(3)
case_header BOOLEANCONST -> 1 case_constant(2)
case_branches SEMIC BOOLEANCONST -> 1 2 case_constant(3)
case_constants COMMA BOOLEANCONST -> 1 2 case_constant(3)
case_header IDENTIFIER -> 1 case_constant(2)
case_branches SEMIC IDENTIFIER -> 1 2 case_constant(3)
case_constants COMMA IDENTIFIER -> 1 2 case_constant(3)
case_header ADD STRINGCONST -> 1 case_constant(2,3)
case_branches SEMIC ADD STRINGCONST -> 1 2 case_constant(3,4)
case_constants COMMA ADD STRINGCONST -> 1 2 case_constant(3,4)
case_header SUB STRINGCONST -> 1 case_constant(2,3)
case_branches SEMIC SUB STRINGCONST -> 1 2 case_constant(3,4)
case_constants COMMA SUB STRINGCONST -> 1 2 case_constant(3,4)
case_header ADD REALCONST -> 1 case_constant(2,3)
case_branches SEMIC ADD REALCONST -> 1 2 case_constant(3,4)
case_constants COMMA ADD REALCONST -> 1 2 case_constant(3,4)
case_header SUB REALCONST -> 1 case_constant(2,3)
case_branches SEMIC SUB REALCONST -> 1 2 case_constant(3,4)
case_constants COMMA SUB REALCONST -> 1 2 case_constant(3,4)
case_header ADD INTEGERCONST -> 1 case_constant(2,3)
case_branches SEMIC ADD INTEGERCONST -> 1 2 case_constant(3,4)
case_constants COMMA ADD INTEGERCONST -> 1 2 case_constant(3,4)
case_header SUB INTEGERCONST -> 1 case_constant(2,3)
case_branches SEMIC SUB INTEGERCONST -> 1 2 case_constant(3,4)
case_constants COMMA SUB INTEGERCONST -> 1 2 case_constant(3,4)
case_header ADD BOOLEANCONST -> 1 case_constant(2,3)
case_branches SEMIC ADD BOOLEANCONST -> 1 2 case_constant(3,4)
case_constants COMMA ADD BOOLEANCONST -> 1 2 case_constant(3,4)
case_header SUB BOOLEANCONST -> 1 case_constant(2,3)
case_branches SEMIC SUB BOOLEANCONST -> 1 2 case_constant(3,4)
case_constants COMMA SUB BOOLEANCONST -> 1 2 case_constant(3,4)
case_header ADD IDENTIFIER -> 1 case_constant(2,3)
case_branches SEMIC ADD IDENTIFIER -> 1 2 case_constant(3,4)
case_constants COMMA ADD IDENTIFIER -> 1 2 case_constant(3,4)
case_header SUB IDENTIFIER -> 1 case_constant(2,3)
case_branches SEMIC SUB IDENTIFIER -> 1 2 case_constant(3,4)
case_constants COMMA SUB IDENTIFIER -> 1 2 case_constant(3,4)

case_header case_constant -> 1 case_constants(2)
case_branches SEMIC case_constant -> 1 2 case_constants(3)
case_constants COMMA case_constant -> case_constants(1,2,3)

case_constants COLON stmt -> case_branch(1,2,3)
case_constants COLON SEMIC -> case_branch(1,2) 3
case_constants COLON END -> case_branch(1,2) 3
case_header case_branch -> 1 case_branches(2)
case_branches SEMIC SEMIC -> 1 SEMIC(2,3)
case_branches SEMIC case_branch -> case_branches(1,2,3)

case_header case_branches END -> case_stmt(1,2,3)
case_header case_branches SEMIC END -> case_stmt(1,2,3,4)

WHILE expr DO stmt -> while_stmt(1,2,3,4)

REPEAT stmts UNTIL expr -> repeat_stmt(1,2,3,4)
REPEAT stmts SEMIC UNTIL expr -> repeat_stmt(1,2,3,4,5)

FOR IDENTIFIER ASSIGN expr TO expr DO stmt -> for_stmt(1,2,3,4,5,6,7,8)
FOR IDENTIFIER ASSIGN expr DOWNTO expr DO stmt -> for_stmt(1,2,3,4,5,6,7,8)
FOR IDENTIFIER ASSIGN expr TO expr STEP expr DO stmt -> for_stmt(1,2,3,4,5,6,7,8,9,10)
FOR IDENTIFIER ASSIGN expr DOWNTO expr STEP expr DO stmt -> for_stmt(1,2,3,4,5,6,7,8,9,10)

WITH vars DO stmt -> with_stmt(1,2,3,4)
WITH IDENTIFIER -> 1 var_name(2)
vars COMMA IDENTIFIER -> 1 2 var_name(3)
WITH var -> 1 vars(2)
vars COMMA var -> vars(1,2,3)

GOTO INTEGERCONST -> goto_stmt(1,2)

// EXPRESSIONS:

ASSIGN BOOLEANCONST -> 1 atom_expr(2)
IF BOOLEANCONST -> 1 atom_expr(2)
CASE BOOLEANCONST -> 1 atom_expr(2)
WHILE BOOLEANCONST -> 1 atom_expr(2)
UNTIL BOOLEANCONST -> 1 atom_expr(2)
TO BOOLEANCONST -> 1 atom_expr(2)
DOWNTO BOOLEANCONST -> 1 atom_expr(2)
STEP BOOLEANCONST -> 1 atom_expr(2)
expr_lparent BOOLEANCONST -> 1 atom_expr(2)
pstfix_lbracket BOOLEANCONST -> 1 atom_expr(2)
pstfix_lparent BOOLEANCONST -> 1 atom_expr(2)
pstfix_op BOOLEANCONST -> 1 atom_expr(2)
prefix_op BOOLEANCONST -> 1 atom_expr(2)
mul_op BOOLEANCONST -> 1 atom_expr(2)
add_op BOOLEANCONST -> 1 atom_expr(2)
rel_op BOOLEANCONST -> 1 atom_expr(2)
exprs COMMA BOOLEANCONST -> 1 2 atom_expr(3)
args COMMA BOOLEANCONST -> 1 2 atom_expr(3)
ASSIGN STRINGCONST -> 1 atom_expr(2)
IF STRINGCONST -> 1 atom_expr(2)
CASE STRINGCONST -> 1 atom_expr(2)
WHILE STRINGCONST -> 1 atom_expr(2)
UNTIL STRINGCONST -> 1 atom_expr(2)
TO STRINGCONST -> 1 atom_expr(2)
DOWNTO STRINGCONST -> 1 atom_expr(2)
STEP STRINGCONST -> 1 atom_expr(2)
expr_lparent STRINGCONST -> 1 atom_expr(2)
pstfix_lbracket STRINGCONST -> 1 atom_expr(2)
pstfix_lparent STRINGCONST -> 1 atom_expr(2)
pstfix_op STRINGCONST -> 1 atom_expr(2)
prefix_op STRINGCONST -> 1 atom_expr(2)
mul_op STRINGCONST -> 1 atom_expr(2)
add_op STRINGCONST -> 1 atom_expr(2)
rel_op STRINGCONST -> 1 atom_expr(2)
exprs COMMA STRINGCONST -> 1 2 atom_expr(3)
args COMMA STRINGCONST -> 1 2 atom_expr(3)
ASSIGN REALCONST -> 1 atom_expr(2)
IF REALCONST -> 1 atom_expr(2)
CASE REALCONST -> 1 atom_expr(2)
WHILE REALCONST -> 1 atom_expr(2)
UNTIL REALCONST -> 1 atom_expr(2)
TO REALCONST -> 1 atom_expr(2)
DOWNTO REALCONST -> 1 atom_expr(2)
STEP REALCONST -> 1 atom_expr(2)
expr_lparent REALCONST -> 1 atom_expr(2)
pstfix_lbracket REALCONST -> 1 atom_expr(2)
pstfix_lparent REALCONST -> 1 atom_expr(2)
pstfix_op REALCONST -> 1 atom_expr(2)
prefix_op REALCONST -> 1 atom_expr(2)
mul_op REALCONST -> 1 atom_expr(2)
add_op REALCONST -> 1 atom_expr(2)
rel_op REALCONST -> 1 atom_expr(2)
exprs COMMA REALCONST -> 1 2 atom_expr(3)
args COMMA REALCONST -> 1 2 atom_expr(3)
ASSIGN INTEGERCONST -> 1 atom_expr(2)
IF INTEGERCONST -> 1 atom_expr(2)
CASE INTEGERCONST -> 1 atom_expr(2)
WHILE INTEGERCONST -> 1 atom_expr(2)
UNTIL INTEGERCONST -> 1 atom_expr(2)
TO INTEGERCONST -> 1 atom_expr(2)
DOWNTO INTEGERCONST -> 1 atom_expr(2)
STEP INTEGERCONST -> 1 atom_expr(2)
expr_lparent INTEGERCONST -> 1 atom_expr(2)
pstfix_lbracket INTEGERCONST -> 1 atom_expr(2)
pstfix_lparent INTEGERCONST -> 1 atom_expr(2)
pstfix_op INTEGERCONST -> 1 atom_expr(2)
prefix_op INTEGERCONST -> 1 atom_expr(2)
mul_op INTEGERCONST -> 1 atom_expr(2)
add_op INTEGERCONST -> 1 atom_expr(2)
rel_op INTEGERCONST -> 1 atom_expr(2)
exprs COMMA INTEGERCONST -> 1 2 atom_expr(3)
args COMMA INTEGERCONST -> 1 2 atom_expr(3)
ASSIGN IDENTIFIER -> 1 atom_expr(2)
IF IDENTIFIER -> 1 atom_expr(2)
CASE IDENTIFIER -> 1 atom_expr(2)
WHILE IDENTIFIER -> 1 atom_expr(2)
UNTIL IDENTIFIER -> 1 atom_expr(2)
TO IDENTIFIER -> 1 atom_expr(2)
DOWNTO IDENTIFIER -> 1 atom_expr(2)
STEP IDENTIFIER -> 1 atom_expr(2)
expr_lparent IDENTIFIER -> 1 atom_expr(2)
pstfix_lbracket IDENTIFIER -> 1 atom_expr(2)
pstfix_lparent IDENTIFIER -> 1 atom_expr(2)
pstfix_op IDENTIFIER -> 1 atom_expr(2)
prefix_op IDENTIFIER -> 1 atom_expr(2)
mul_op IDENTIFIER -> 1 atom_expr(2)
add_op IDENTIFIER -> 1 atom_expr(2)
rel_op IDENTIFIER -> 1 atom_expr(2)
exprs COMMA IDENTIFIER -> 1 2 atom_expr(3)
args COMMA IDENTIFIER -> 1 2 atom_expr(3)
ASSIGN LPARENT -> 1 expr_lparent(2)
IF LPARENT -> 1 expr_lparent(2)
CASE LPARENT -> 1 expr_lparent(2)
WHILE LPARENT -> 1 expr_lparent(2)
UNTIL LPARENT -> 1 expr_lparent(2)
TO LPARENT -> 1 expr_lparent(2)
DOWNTO LPARENT -> 1 expr_lparent(2)
STEP LPARENT -> 1 expr_lparent(2)
expr_lparent LPARENT -> 1 expr_lparent(2)
pstfix_lbracket LPARENT -> 1 expr_lparent(2)
pstfix_lparent LPARENT -> 1 expr_lparent(2)
pstfix_op LPARENT -> 1 expr_lparent(2)
prefix_op LPARENT -> 1 expr_lparent(2)
mul_op LPARENT -> 1 expr_lparent(2)
add_op LPARENT -> 1 expr_lparent(2)
rel_op LPARENT -> 1 expr_lparent(2)
exprs COMMA LPARENT -> 1 2 expr_lparent(3)
args COMMA LPARENT -> 1 2 expr_lparent(3)
ASSIGN ADD -> 1 prefix_op(2)
IF ADD -> 1 prefix_op(2)
CASE ADD -> 1 prefix_op(2)
WHILE ADD -> 1 prefix_op(2)
UNTIL ADD -> 1 prefix_op(2)
TO ADD -> 1 prefix_op(2)
DOWNTO ADD -> 1 prefix_op(2)
STEP ADD -> 1 prefix_op(2)
expr_lparent ADD -> 1 prefix_op(2)
pstfix_lbracket ADD -> 1 prefix_op(2)
pstfix_lparent ADD -> 1 prefix_op(2)
pstfix_op ADD -> 1 prefix_op(2)
prefix_op ADD -> 1 prefix_op(2)
mul_op ADD -> 1 prefix_op(2)
add_op ADD -> 1 prefix_op(2)
rel_op ADD -> 1 prefix_op(2)
exprs COMMA ADD -> 1 2 prefix_op(3)
args COMMA ADD -> 1 2 prefix_op(3)
ASSIGN SUB -> 1 prefix_op(2)
IF SUB -> 1 prefix_op(2)
CASE SUB -> 1 prefix_op(2)
WHILE SUB -> 1 prefix_op(2)
UNTIL SUB -> 1 prefix_op(2)
TO SUB -> 1 prefix_op(2)
DOWNTO SUB -> 1 prefix_op(2)
STEP SUB -> 1 prefix_op(2)
expr_lparent SUB -> 1 prefix_op(2)
pstfix_lbracket SUB -> 1 prefix_op(2)
pstfix_lparent SUB -> 1 prefix_op(2)
pstfix_op SUB -> 1 prefix_op(2)
prefix_op SUB -> 1 prefix_op(2)
mul_op SUB -> 1 prefix_op(2)
add_op SUB -> 1 prefix_op(2)
rel_op SUB -> 1 prefix_op(2)
exprs COMMA SUB -> 1 2 prefix_op(3)
args COMMA SUB -> 1 2 prefix_op(3)
ASSIGN NOT -> 1 prefix_op(2)
IF NOT -> 1 prefix_op(2)
CASE NOT -> 1 prefix_op(2)
WHILE NOT -> 1 prefix_op(2)
UNTIL NOT -> 1 prefix_op(2)
TO NOT -> 1 prefix_op(2)
DOWNTO NOT -> 1 prefix_op(2)
STEP NOT -> 1 prefix_op(2)
expr_lparent NOT -> 1 prefix_op(2)
pstfix_lbracket NOT -> 1 prefix_op(2)
pstfix_lparent NOT -> 1 prefix_op(2)
pstfix_op NOT -> 1 prefix_op(2)
prefix_op NOT -> 1 prefix_op(2)
mul_op NOT -> 1 prefix_op(2)
add_op NOT -> 1 prefix_op(2)
rel_op NOT -> 1 prefix_op(2)
exprs COMMA NOT -> 1 2 prefix_op(3)
args COMMA NOT -> 1 2 prefix_op(3)
ASSIGN PTR -> 1 prefix_op(2)
IF PTR -> 1 prefix_op(2)
CASE PTR -> 1 prefix_op(2)
WHILE PTR -> 1 prefix_op(2)
UNTIL PTR -> 1 prefix_op(2)
TO PTR -> 1 prefix_op(2)
DOWNTO PTR -> 1 prefix_op(2)
STEP PTR -> 1 prefix_op(2)
expr_lparent PTR -> 1 prefix_op(2)
pstfix_lbracket PTR -> 1 prefix_op(2)
pstfix_lparent PTR -> 1 prefix_op(2)
pstfix_op PTR -> 1 prefix_op(2)
prefix_op PTR -> 1 prefix_op(2)
mul_op PTR -> 1 prefix_op(2)
add_op PTR -> 1 prefix_op(2)
rel_op PTR -> 1 prefix_op(2)
exprs COMMA PTR -> 1 2 prefix_op(3)
args COMMA PTR -> 1 2 prefix_op(3)

atom_expr -> pstfix_expr(1)
pstfix_expr PTR -> pstfix_core(1) 2
pstfix_expr DOT -> pstfix_core(1) 2
pstfix_expr LBRACKET -> pstfix_core(1) 2
pstfix_expr LPARENT -> pstfix_core(1) 2
pstfix_core PTR -> pstfix_expr(1,2)
pstfix_core DOT IDENTIFIER -> pstfix_expr(1,2,3)
pstfix_core LBRACKET -> 1 pstfix_lbracket(2)
pstfix_core pstfix_lbracket exprs RBRACKET -> pstfix_expr(1,2,3,4)
pstfix_core LPARENT -> 1 pstfix_lparent(2)
pstfix_core pstfix_lparent args RPARENT -> pstfix_expr(1,2,3,4)

pstfix_lbracket expr -> 1 exprs(2)
exprs COMMA expr -> exprs(1,2,3)

pstfix_lparent expr -> 1 arg(2)
args COMMA expr -> 1 2 arg(3)
pstfix_lparent expr COLON INTEGERCONST -> 1 arg(2,3,4)
args COMMA expr COLON INTEGERCONST -> 1 2 arg(3,4,5)
pstfix_lparent expr COLON INTEGERCONST COLON INTEGERCONST -> 1 arg(2,3,4,5,6)
args COMMA expr COLON INTEGERCONST COLON INTEGERCONST -> 1 2 arg(3,4,5,6,7)
pstfix_lparent arg -> 1 args(2)
args COMMA arg -> args(1,2,3)

pstfix_expr -> prefix_expr(1)
prefix_op pstfix_expr -> prefix_expr(1,2)
prefix_op pstfix_expr PTR -> 1 pstfix_core(2) 3
prefix_op pstfix_expr DOT -> 1 pstfix_core(2) 3
prefix_op pstfix_expr LBRACKET -> 1 pstfix_core(2) 3
prefix_op pstfix_expr LPARENT -> 1 pstfix_core(2) 3

prefix_expr -> mul_expr(1)
mul_expr MUL -> mul_core(1) mul_op(2)
mul_expr DIV -> mul_core(1) mul_op(2)
mul_expr IDIV -> mul_core(1) mul_op(2)
mul_expr IMOD -> mul_core(1) mul_op(2)
mul_expr AND -> mul_core(1) mul_op(2)
mul_core mul_op mul_expr -> mul_expr(1,2,3)

mul_expr -> add_expr(1)
add_expr ADD -> add_core(1) add_op(2)
add_expr SUB -> add_core(1) add_op(2)
add_expr OR -> add_core(1) add_op(2)
add_core add_op add_expr -> add_expr(1,2,3)

add_expr -> rel_core_a(1)
rel_core_a EQU -> rel_core_b(1) rel_op(2)
rel_core_a NEQ -> rel_core_b(1) rel_op(2)
rel_core_a LTH -> rel_core_b(1) rel_op(2)
rel_core_a GTH -> rel_core_b(1) rel_op(2)
rel_core_a LEQ -> rel_core_b(1) rel_op(2)
rel_core_a GEQ -> rel_core_b(1) rel_op(2)
rel_core_a IN -> rel_core_b(1) rel_op(2)
rel_core_a -> rel_expr(1)
rel_core_b rel_op rel_core_a -> rel_expr(1,2,3)

rel_expr -> expr(1)

expr_lparent expr RPARENT -> atom_expr(1,2,3)
